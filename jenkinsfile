pipeline {
    agent any
    environment {
        REACT_APP_VERSION = "1.0.$BUILD_ID"
        APP_NAME = "jenkinsapp"
        AWS_DEFAULT_REGION = 'ap-south-1'
        AWS_DOCKER_REGISTRY = '339712840512.dkr.ecr.ap-south-1.amazonaws.com'
        AWS_ECS_CLUSTER ="JenkinApp-Cluster-Prod "
        AWS_ECS_SERVICE_PROD ="JenkinsApp-Service-Prod"
        AWS_ECS_TD_PROD ="JenkinsApp-Taskdefinition-Pro"
    }
    stages {

        stage('Build') {
            agent {
                docker {
                    image 'node:22.13.1-alpine3.21'
                    reuseNode true
                }
            }
            steps {
                sh '''
                ls -al
                node --version
                npm --version
                npm ci
                npm run build
                ls -al
                '''
            }
        }

        stage("Build Docker image"){
             agent {
                docker {
                    image 'my-aws-cli'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                }
            }
            steps{
                    withCredentials([usernamePassword(credentialsId: 'my-cloud', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                sh ''' 
                    docker build -t $AWS_DOCKER_REGISTRY/$APP_NAME:$REACT_APP_VERSION .
                    aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY
                    docker push $AWS_DOCKER_REGISTRY/$APP_NAME:$REACT_APP_VERSION
                '''
                }
            }
        }

        stage("Deploy To AWS"){
            agent {
                docker {
                    image 'my-aws-cli'
                    args "-u root --entrypoint=''"
                }
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'my-cloud', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        yum install jq -y
                        LATEST_TD_REVISION=$(aws ecs register-task-definition --cli-input-json file://aws/task-definition-prod.json | jq '.taskDefinition.revision')
                        echo $LATEST_TD_REVISION   
                        aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE_PROD --task-definition $AWS_ECS_TD_PROD:$LATEST_TD_REVISION 
                        aws ecs wait services-stable --cluster $AWS_ECS_CLUSTER  --services $AWS_ECS_SERVICE_PROD
                    '''
                }
               
            }
        }
    }
}


